
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile
from handlers.language import user_lang
from handlers.cart import user_cart
from handlers.google_sheet_writer import save_full_booking
from datetime import datetime

router = Router()

class PaymentState(StatesGroup):
    choosing_method = State()
    waiting_for_address = State()

@router.callback_query(F.data == "pay")
async def choose_payment_method(callback: types.CallbackQuery, state: FSMContext):
    lang = user_lang.get(callback.from_user.id, "ru")
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:" if lang == "ru" else "–¢”©–ª–µ–º —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:"
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üöö –≠—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞" if lang == "ru" else "üöö –ë“±–ª –∂–µ—Ç–∫—ñ–∑—É",
            callback_data="choose_delivery"
        ),
        types.InlineKeyboardButton(
            text="üìç –≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" if lang == "ru" else "üìç –ë“±–ª –±—Ä–æ–Ω–¥–∞—É",
            callback_data="choose_booking"
        )
    )
    await callback.message.answer(text, reply_markup=builder.as_markup())
    await state.set_state(PaymentState.choosing_method)

@router.callback_query(F.data == "choose_delivery")
async def ask_address(callback: types.CallbackQuery, state: FSMContext):
    lang = user_lang.get(callback.from_user.id, "ru")
    text = "üöö –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:" if lang == "ru" else "üöö –ñ–µ—Ç–∫—ñ–∑—É –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω –∂–∞–∑—ã“£—ã–∑:"
    await state.set_state(PaymentState.waiting_for_address)
    await state.update_data(from_booking=False)
    await callback.message.answer(text)

@router.message(PaymentState.waiting_for_address)
async def show_qr_after_address(message: types.Message, state: FSMContext):
    address = message.text
    await state.update_data(address=address)
    await send_qr_code(message, address=address)
    # state.clear() –£–î–ê–õ–ï–ù–û!

@router.callback_query(F.data == "choose_booking")
async def show_qr_booking(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(from_booking=True)
    await send_qr_code(callback.message)
    # state.clear() –£–î–ê–õ–ï–ù–û!

@router.callback_query(F.data == "payment_confirmed")
async def handle_payment_confirmation(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name
    lang = user_lang.get(user_id, "ru")
    cart = user_cart.get(user_id, [])
    state_data = await state.get_data()

    from_booking = state_data.get("from_booking", False)
    address = state_data.get("address", "-")
    phone = state_data.get("phone", "-")
    date = state_data.get("date", "-")
    time = state_data.get("time", "-")
    people = state_data.get("people", "-")

    total = sum(item.get("price", 0) * item.get("portion", 0) for item in cart)
    items = ", ".join([f"{item.get('name_ru', '‚Äî')} x{item.get('portion', 0)}" for item in cart])
    now = datetime.now().strftime("%Y-%m-%d %H:%M")

    save_full_booking(
        user_id=user_id,
        username=user_name,
        order_type="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" if from_booking else "–î–æ—Å—Ç–∞–≤–∫–∞",
        cart_items=cart,
        total_amount=total,
        booking_info={
            "count": people if from_booking else "-",
            "date": date if from_booking else "-",
            "time": time if from_booking else "-",
            "phone": phone if from_booking else "-",
            "address": address if not from_booking else "-"
        }
    )

    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

    text = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ —á–µ—Ä–µ–∑ WhatsApp." if lang == "ru" else "‚úÖ –¢”©–ª–µ–º “Ø—à—ñ–Ω —Ä–∞“õ–º–µ—Ç! –¢“Ø–±—ñ—Ä—Ç–µ–∫—Ç—ñ WhatsApp –∞—Ä“õ—ã–ª—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑."
    await callback.message.answer(text)


async def send_qr_code(message: types.Message, address: str = None):
    lang = user_lang.get(message.from_user.id, "ru")
    cart = user_cart.get(message.from_user.id, [])
    total = sum(item.get("price", 0) * item.get("portion", 0) for item in cart)

    caption_parts = []
    if address:
        caption_parts.append(f"üìç <b>–ê–¥—Ä–µ—Å:</b>\n{address}" if lang == "ru" else f"üìç <b>–ú–µ–∫–µ–Ω–∂–∞–π:</b>\n{address}")
    caption_parts.append(f"üíµ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total} —Ç–≥</b>" if lang == "ru" else f"üíµ <b>–ñ–∞–ª–ø—ã —Å–æ–º–∞: {total} —Ç–≥</b>")
    caption_parts.append(
        "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ Kaspi –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏–ª¬ª." if lang == "ru"
        else "Kaspi QR –∫–æ–¥—ã–Ω —Å–∫–∞–Ω–µ—Ä–ª–µ–ø, ¬´–¢”©–ª–µ–¥—ñ–º¬ª –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑."
    )

    qr_path = "img/payment/payment_kaspi.jpg"
    photo = FSInputFile(qr_path)

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="‚úÖ –û–ø–ª–∞—Ç–∏–ª" if lang == "ru" else "‚úÖ –¢”©–ª–µ–¥—ñ–º",
            callback_data="payment_confirmed"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –≤ WhatsApp" if lang == "ru" else "üì≤ –¢“Ø–±—ñ—Ä—Ç–µ–∫—Ç—ñ WhatsApp-“õ–∞ –∂—ñ–±–µ—Ä—É",
            url="https://wa.me/7086068647"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ru" else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞",
            callback_data="back_to_menu_categories"
        )
    )

    await message.answer_photo(photo=photo, caption="\n\n".join(caption_parts), reply_markup=builder.as_markup(), parse_mode="HTML")